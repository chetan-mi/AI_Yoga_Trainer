<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Yoga AI Trainer - Live Session</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Inter', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            min-height: 100vh;
            overflow-x: hidden;
        }
        
        .main-container {
            display: flex;
            height: 100vh;
            gap: 0;
        }
        
        /* Language Selection Modal */
        .language-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.9);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
            backdrop-filter: blur(10px);
        }
        
        .language-modal.hidden {
            display: none;
        }
        
        .language-modal-content {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            padding: 40px;
            border-radius: 20px;
            text-align: center;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
            max-width: 500px;
            width: 90%;
        }
        
        .language-modal h2 {
            font-size: 2rem;
            margin-bottom: 20px;
            color: #ffd43b;
        }
        
        .language-modal p {
            margin-bottom: 30px;
            opacity: 0.9;
            font-size: 1.1rem;
        }
        
        .language-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 15px;
            margin-bottom: 30px;
        }
        
        .language-option {
            padding: 15px 20px;
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-radius: 15px;
            background: rgba(255, 255, 255, 0.1);
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 500;
        }
        
        .language-option:hover {
            background: rgba(255, 255, 255, 0.2);
            transform: translateY(-2px);
            border-color: #ffd43b;
        }
        
        .language-option.selected {
            background: #ffd43b;
            color: #667eea;
            border-color: #ffd43b;
        }
        
        .start-session-btn {
            background: linear-gradient(135deg, #ffd43b, #ff9e6b);
            color: #667eea;
            border: none;
            padding: 15px 40px;
            border-radius: 50px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(255, 212, 59, 0.3);
        }
        
        .start-session-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(255, 212, 59, 0.4);
        }
        
        /* Video Section */
        .video-section {
            flex: 1;
            display: flex;
            flex-direction: column;
            background: #000;
            position: relative;
        }
        
        .video-header {
            background: rgba(0, 0, 0, 0.8);
            padding: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            backdrop-filter: blur(10px);
        }
        
        .session-title {
            font-size: 1.8rem;
            font-weight: 700;
            color: #ffd43b;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .session-status {
            display: flex;
            align-items: center;
            gap: 15px;
        }
        
        .status-indicator {
            width: 15px;
            height: 15px;
            border-radius: 50%;
            background: #ff6b6b;
            animation: pulse 2s infinite;
        }
        
        .status-indicator.active {
            background: #40c057;
        }
        
        @keyframes pulse {
            0% { opacity: 1; transform: scale(1); }
            50% { opacity: 0.7; transform: scale(1.1); }
            100% { opacity: 1; transform: scale(1); }
        }
        
        .video-container {
            flex: 1;
            position: relative;
            display: flex;
            align-items: center;
            justify-content: center;
            background: #000;
        }
        
        #video {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border-radius: 0;
        }
        
        .video-overlay {
            position: absolute;
            top: 20px;
            right: 20px;
            background: rgba(0, 0, 0, 0.8);
            padding: 15px 20px;
            border-radius: 15px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        
        .confidence-display {
            display: flex;
            align-items: center;
            gap: 15px;
            margin-bottom: 15px;
        }
        
        .confidence-bar {
            width: 120px;
            height: 10px;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 5px;
            overflow: hidden;
        }
        
        .confidence-fill {
            height: 100%;
            background: linear-gradient(90deg, #ff6b6b, #ff9e6b, #40c057);
            border-radius: 5px;
            width: 0%;
            transition: width 0.5s ease;
        }
        
        .pose-name-overlay {
            font-size: 1.4rem;
            font-weight: 700;
            color: #ffd43b;
            text-align: center;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
        }
        
        /* Detection Timer */
        .detection-timer {
            position: absolute;
            top: 20px;
            left: 20px;
            background: rgba(0, 0, 0, 0.8);
            padding: 15px 20px;
            border-radius: 15px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            display: none;
        }
        
        .detection-timer.active {
            display: block;
        }
        
        .timer-circle {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            background: conic-gradient(#ffd43b 0deg, #ffd43b var(--progress, 0deg), rgba(255, 255, 255, 0.2) var(--progress, 0deg));
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 10px;
            position: relative;
        }
        
        .timer-circle::before {
            content: '';
            position: absolute;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: rgba(0, 0, 0, 0.8);
        }
        
        .timer-text {
            position: relative;
            z-index: 1;
            font-weight: 700;
            font-size: 1.2rem;
        }
        
        .timer-label {
            text-align: center;
            font-size: 0.9rem;
            opacity: 0.8;
        }
        
        /* Side Panel */
        .side-panel {
            width: 400px;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(20px);
            display: flex;
            flex-direction: column;
            border-left: 1px solid rgba(255, 255, 255, 0.2);
        }
        
        .panel-header {
            padding: 25px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.2);
            text-align: center;
        }
        
        .panel-title {
            font-size: 1.5rem;
            font-weight: 700;
            margin-bottom: 8px;
            color: #ffd43b;
        }
        
        .panel-subtitle {
            font-size: 1rem;
            opacity: 0.8;
        }
        
        .detection-results {
            padding: 25px;
            flex: 1;
            overflow-y: auto;
        }
        
        .pose-detection-card {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 20px;
            padding: 25px;
            margin-bottom: 25px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            backdrop-filter: blur(10px);
        }
        
        .pose-name {
            font-size: 2rem;
            font-weight: 700;
            color: #ffd43b;
            text-align: center;
            margin-bottom: 20px;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
        }
        
        .confidence-section {
            display: flex;
            align-items: center;
            gap: 20px;
            margin-bottom: 25px;
        }
        
        .confidence-label {
            font-size: 1rem;
            opacity: 0.8;
        }
        
        .confidence-value {
            font-size: 1.4rem;
            font-weight: 700;
            color: #40c057;
        }
        
        .annotated-image-container {
            margin-bottom: 25px;
        }
        
        .annotated-image {
            width: 100%;
            border-radius: 15px;
            background: #000;
            aspect-ratio: 4/3;
            object-fit: cover;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
        }
        
        .instructions-section {
            background: rgba(0, 0, 0, 0.3);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
        }
        
        .instructions-title {
            font-size: 1.2rem;
            font-weight: 700;
            color: #ffd43b;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .instructions-list {
            list-style: none;
            padding: 0;
        }
        
        .instructions-list li {
            padding: 10px 0;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            font-size: 1rem;
            line-height: 1.5;
        }
        
        .instructions-list li:last-child {
            border-bottom: none;
        }
        
        .feedback-section {
            background: rgba(0, 0, 0, 0.3);
            border-radius: 15px;
            padding: 20px;
        }
        
        .feedback-title {
            font-size: 1.2rem;
            font-weight: 700;
            color: #ffd43b;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .feedback-text {
            font-size: 1rem;
            line-height: 1.5;
            opacity: 0.9;
        }
        
        /* Bottom Bar */
        .bottom-bar {
            background: rgba(0, 0, 0, 0.9);
            padding: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            backdrop-filter: blur(20px);
            border-top: 1px solid rgba(255, 255, 255, 0.2);
        }
        
        .detection-info {
            display: flex;
            align-items: center;
            gap: 25px;
        }
        
        .current-pose {
            font-size: 1.3rem;
            font-weight: 700;
        }
        
        .detection-accuracy {
            display: flex;
            align-items: center;
            gap: 15px;
        }
        
        .controls {
            display: flex;
            gap: 20px;
        }
        
        button {
            padding: 15px 30px;
            border: none;
            border-radius: 50px;
            background: linear-gradient(135deg, #ff6b6b, #ff9e6b);
            color: white;
            font-weight: 700;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
            font-size: 1rem;
        }
        
        button:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);
        }
        
        button:active {
            transform: translateY(0);
        }
        
        button:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }
        
        #startBtn {
            background: linear-gradient(135deg, #40c057, #69db7c);
        }
        
        #stopBtn {
            background: linear-gradient(135deg, #ff6b6b, #ff9e6b);
        }
        
        .status-text {
            font-size: 1rem;
            opacity: 0.8;
        }
        
        /* Scrollbar Styling */
        .detection-results::-webkit-scrollbar {
            width: 8px;
        }
        
        .detection-results::-webkit-scrollbar-track {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 4px;
        }
        
        .detection-results::-webkit-scrollbar-thumb {
            background: rgba(255, 255, 255, 0.3);
            border-radius: 4px;
        }
        
        .detection-results::-webkit-scrollbar-thumb:hover {
            background: rgba(255, 255, 255, 0.5);
        }
        
        /* Responsive Design */
        @media (max-width: 1200px) {
            .side-panel {
                width: 350px;
            }
        }
        
        @media (max-width: 768px) {
            .main-container {
                flex-direction: column;
            }
            
            .side-panel {
                width: 100%;
                height: 40vh;
            }
            
            .video-section {
                height: 60vh;
            }
            
            .language-grid {
                grid-template-columns: 1fr;
            }
        }
        
        /* Animations */
        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        .pose-detection-card {
            animation: fadeInUp 0.6s ease-out;
        }
        
        /* Loading Animation */
        .loading-spinner {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top-color: #fff;
            animation: spin 1s ease-in-out infinite;
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <!-- Language Selection Modal -->
    <div class="language-modal" id="languageModal">
        <div class="language-modal-content">
            <h2>🌍 Choose Your Language</h2>
            <p>Select your preferred language for voice guidance and instructions</p>
            <div class="language-grid" id="languageGrid">
                <div class="language-option" data-lang="en">
                    <div>🇮�� English (India)</div>
                </div>
                <div class="language-option" data-lang="hi">
                    <div>🇮🇳 हिंदी (Hindi)</div>
                </div>
                <div class="language-option" data-lang="kn">
                    <div>🇮🇳 ಕನ್ನಡ (Kannada)</div>
                </div>
                <div class="language-option" data-lang="ta">
                    <div>🇮🇳 தமிழ் (Tamil)</div>
                </div>
                <div class="language-option" data-lang="te">
                    <div>🇮🇳 తెలుగు (Telugu)</div>
                </div>
                <div class="language-option" data-lang="mr">
                    <div>🇮🇳 मराठी (Marathi)</div>
                </div>
            </div>
            <button class="start-session-btn" id="startSessionBtn">
                <span>Start Yoga Session</span>
            </button>
        </div>
    </div>

    <div class="main-container">
        <!-- Main Video Section -->
        <div class="video-section">
            <div class="video-header">
                <div class="session-title">
                    🧘‍♀️ Yoga AI Trainer
                </div>
                <div class="session-status">
                    <div class="status-indicator" id="statusIndicator"></div>
                    <span id="status">Ready to start</span>
                </div>
            </div>
            
            <div class="video-container">
                <video id="video" autoplay playsinline muted></video>
                <canvas id="canvas" style="display:none;"></canvas>
                
                <!-- Detection Timer -->
                <div class="detection-timer" id="detectionTimer">
                    <div class="timer-circle" id="timerCircle">
                        <div class="timer-text" id="timerText">5</div>
                    </div>
                    <div class="timer-label">Detecting...</div>
                </div>
                
                <div class="video-overlay">
                    <div class="confidence-display">
                        <span>Confidence:</span>
                        <div class="confidence-bar">
                            <div class="confidence-fill" id="confidenceBar"></div>
                        </div>
                        <span id="confidenceValue">—</span>
                    </div>
                    <div class="pose-name-overlay" id="poseNameOverlay">—</div>
                </div>
            </div>
            
            <div class="bottom-bar">
                <div class="detection-info">
                    <div class="current-pose">
                        <span>Current Pose: </span>
                        <span id="poseName">—</span>
                    </div>
                    <div class="detection-accuracy">
                        <span>Accuracy: </span>
                        <span id="confidenceValueBottom">—</span>
                    </div>
                </div>
                
                <div class="controls">
                    <button id="startBtn" disabled>
                        <span>Start Session</span>
                    </button>
                    <button id="stopBtn" disabled>End Session</button>
                </div>
            </div>
        </div>
        
        <!-- Side Panel -->
        <div class="side-panel">
            <div class="panel-header">
                <div class="panel-title">Detection Results</div>
                <div class="panel-subtitle">Real-time pose analysis</div>
            </div>
            
            <div class="detection-results">
                <div class="pose-detection-card">
                    <div class="pose-name" id="poseNameSide">—</div>
                    
                    <div class="confidence-section">
                        <span class="confidence-label">Confidence Level:</span>
                        <span class="confidence-value" id="confidenceValueSide">—</span>
                    </div>
                    
                    <div class="annotated-image-container">
                        <img id="annotated" class="annotated-image" alt="Annotated frame" />
                    </div>
                    
                    <div class="instructions-section">
                        <div class="instructions-title">
                            📋 Instructions
                        </div>
                        <ul class="instructions-list" id="instructionsList">
                            <li>Start detection to see pose instructions</li>
                        </ul>
                    </div>
                    
                    <div class="feedback-section">
                        <div class="feedback-title">
                            💡 Feedback (Voice)
                        </div>
                        <p class="feedback-text" id="feedbackText">Start detection to receive pose feedback</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Global variables
        let stream = null;
        let loopHandle = null;
        let currentPose = null;
        let poseStartTime = null;
        let lastAnnouncedPose = null;
        let currentLanguage = 'en';
        let selectedLanguage = 'en';
        let detectionTimer = null;
        let timerInterval = null;
        
        const CAPTURE_MS = 5000; // 5 seconds
        const POSE_CONFIRMATION_TIME = 5000; // 5 seconds to confirm pose
        
        // Traditional Sanskrit pose names mapping
        const traditionalNames = {
            'Akarna_Dhanurasana': 'Akarna Dhanurasana',
            'Bharadvajas_Twist_pose_or_Bharadvajasana_I_': 'Bharadvajasana I',
            'Boat_Pose_or_Paripurna_Navasana_': 'Paripurna Navasana',
            'Bound_Angle_Pose_or_Baddha_Konasana_': 'Baddha Konasana',
            'Bow_Pose_or_Dhanurasana_': 'Dhanurasana',
            'Bridge_Pose_or_Setu_Bandha_Sarvangasana_': 'Setu Bandha Sarvangasana',
            'Camel_Pose_or_Ustrasana_': 'Ustrasana',
            'Cat_Cow_Pose_or_Marjaryasana_': 'Marjaryasana',
            'Chair_Pose_or_Utkatasana_': 'Utkatasana',
            'Child_Pose_or_Balasana_': 'Balasana',
            'Cobra_Pose_or_Bhujangasana_': 'Bhujangasana',
            'Cockerel_Pose': 'Kukkutasana',
            'Corpse_Pose_or_Savasana_': 'Savasana',
            'Cow_Face_Pose_or_Gomukhasana_': 'Gomukhasana',
            'Crane_(Crow)_Pose_or_Bakasana_': 'Bakasana',
            'Dolphin_Plank_Pose_or_Makara_Adho_Mukha_Svanasana_': 'Makara Adho Mukha Svanasana',
            'Dolphin_Pose_or_Ardha_Pincha_Mayurasana_': 'Ardha Pincha Mayurasana',
            'Downward-Facing_Dog_pose_or_Adho_Mukha_Svanasana_': 'Adho Mukha Svanasana',
            'Eagle_Pose_or_Garudasana_': 'Garudasana',
            'Eight-Angle_Pose_or_Astavakrasana_': 'Astavakrasana',
            'Extended_Puppy_Pose_or_Uttana_Shishosana_': 'Uttana Shishosana',
            'Extended_Revolved_Side_Angle_Pose_or_Utthita_Parsvakonasana_': 'Utthita Parsvakonasana',
            'Extended_Revolved_Triangle_Pose_or_Utthita_Trikonasana_': 'Utthita Trikonasana',
            'Feathered_Peacock_Pose_or_Pincha_Mayurasana_': 'Pincha Mayurasana',
            'Firefly_Pose_or_Tittibhasana_': 'Tittibhasana',
            'Fish_Pose_or_Matsyasana_': 'Matsyasana',
            'Four-Limbed_Staff_Pose_or_Chaturanga_Dandasana_': 'Chaturanga Dandasana',
            'Frog_Pose_or_Bhekasana': 'Bhekasana',
            'Garland_Pose_or_Malasana_': 'Malasana',
            'Gate_Pose_or_Parighasana_': 'Parighasana',
            'Half_Lord_of_the_Fishes_Pose_or_Ardha_Matsyendrasana_': 'Ardha Matsyendrasana',
            'Half_Moon_Pose_or_Ardha_Chandrasana_': 'Ardha Chandrasana',
            'Handstand_pose_or_Adho_Mukha_Vrksasana_': 'Adho Mukha Vrksasana',
            'Happy_Baby_Pose_or_Ananda_Balasana_': 'Ananda Balasana',
            'Head-to-Knee_Forward_Bend_pose_or_Janu_Sirsasana_': 'Janu Sirsasana',
            'Heron_Pose_or_Krounchasana_': 'Krounchasana',
            'Intense_Side_Stretch_Pose_or_Parsvottanasana_': 'Parsvottanasana',
            'Legs-Up-the-Wall_Pose_or_Viparita_Karani_': 'Viparita Karani',
            'Locust_Pose_or_Salabhasana_': 'Salabhasana',
            'Lord_of_the_Dance_Pose_or_Natarajasana_': 'Natarajasana',
            'Low_Lunge_pose_or_Anjaneyasana_': 'Anjaneyasana',
            'Noose_Pose_or_Pasasana_': 'Pasasana',
            'Peacock_Pose_or_Mayurasana_': 'Mayurasana',
            'Pigeon_Pose_or_Kapotasana_': 'Kapotasana',
            'Plank_Pose_or_Kumbhakasana_': 'Kumbhakasana',
            'Plow_Pose_or_Halasana_': 'Halasana',
            'Pose_Dedicated_to_the_Sage_Koundinya_or_Eka_Pada_Koundinyanasana_I_and_II': 'Eka Pada Koundinyanasana',
            'Rajakapotasana': 'Rajakapotasana',
            'Reclining_Hand-to-Big-Toe_Pose_or_Supta_Padangusthasana_': 'Supta Padangusthasana',
            'Revolved_Head-to-Knee_Pose_or_Parivrtta_Janu_Sirsasana_': 'Parivrtta Janu Sirsasana',
            'Scale_Pose_or_Tolasana_': 'Tolasana',
            'Scorpion_pose_or_vrischikasana': 'Vrischikasana',
            'Seated_Forward_Bend_pose_or_Paschimottanasana_': 'Paschimottanasana',
            'Shoulder-Pressing_Pose_or_Bhujapidasana_': 'Bhujapidasana',
            'Side-Reclining_Leg_Lift_pose_or_Anantasana_': 'Anantasana',
            'Side_Crane_(Crow)_Pose_or_Parsva_Bakasana_': 'Parsva Bakasana',
            'Side_Plank_Pose_or_Vasisthasana_': 'Vasisthasana',
            'Sitting pose 1 (normal)': 'Sukhasana',
            'Split pose': 'Hanumanasana',
            'Staff_Pose_or_Dandasana_': 'Dandasana',
            'Standing_Forward_Bend_pose_or_Uttanasana_': 'Uttanasana',
            'Standing_Split_pose_or_Urdhva_Prasarita_Eka_Padasana_': 'Urdhva Prasarita Eka Padasana',
            'Standing_big_toe_hold_pose_or_Utthita_Padangusthasana': 'Utthita Padangusthasana',
            'Supported_Headstand_pose_or_Salamba_Sirsasana_': 'Salamba Sirsasana',
            'Supported_Shoulderstand_pose_or_Salamba_Sarvangasana_': 'Salamba Sarvangasana',
            'Supta_Baddha_Konasana_': 'Supta Baddha Konasana',
            'Supta_Virasana_Vajrasana': 'Supta Virasana',
            'Tortoise_Pose': 'Kurmasana',
            'Tree_Pose_or_Vrksasana_': 'Vrksasana',
            'Upward_Bow_(Wheel)_Pose_or_Urdhva_Dhanurasana_': 'Urdhva Dhanurasana',
            'Upward_Facing_Two-Foot_Staff_Pose_or_Dwi_Pada_Viparita_Dandasana_': 'Dwi Pada Viparita Dandasana',
            'Upward_Plank_Pose_or_Purvottanasana_': 'Purvottanasana',
            'Virasana_or_Vajrasana': 'Vajrasana',
            'Warrior_III_Pose_or_Virabhadrasana_III_': 'Virabhadrasana III',
            'Warrior_II_Pose_or_Virabhadrasana_II_': 'Virabhadrasana II',
            'Warrior_I_Pose_or_Virabhadrasana_I_': 'Virabhadrasana I',
            'Wide-Angle_Seated_Forward_Bend_pose_or_Upavistha_Konasana_': 'Upavistha Konasana',
            'Wide-Legged_Forward_Bend_pose_or_Prasarita_Padottanasana_': 'Prasarita Padottanasana',
            'Wild_Thing_pose_or_Camatkarasana_': 'Camatkarasana',
            'Wind_Relieving_pose_or_Pawanmuktasana': 'Pawanmuktasana',
            'Yogic_sleep_pose': 'Yoga Nidra',
            'viparita_virabhadrasana_or_reverse_warrior_pose': 'Viparita Virabhadrasana'
        };
        
        // DOM elements
        const video = document.getElementById('video');
        const canvas = document.getElementById('canvas');
        const startBtn = document.getElementById('startBtn');
        const stopBtn = document.getElementById('stopBtn');
        const statusEl = document.getElementById('status');
        const statusIndicator = document.getElementById('statusIndicator');
        const poseNameEl = document.getElementById('poseName');
        const poseNameSide = document.getElementById('poseNameSide');
        const poseNameOverlay = document.getElementById('poseNameOverlay');
        const confidenceBar = document.getElementById('confidenceBar');
        const confidenceValue = document.getElementById('confidenceValue');
        const confidenceValueBottom = document.getElementById('confidenceValueBottom');
        const confidenceValueSide = document.getElementById('confidenceValueSide');
        const instructionsList = document.getElementById('instructionsList');
        const feedbackText = document.getElementById('feedbackText');
        const annotatedImg = document.getElementById('annotated');
        const languageModal = document.getElementById('languageModal');
        const languageGrid = document.getElementById('languageGrid');
        const startSessionBtn = document.getElementById('startSessionBtn');
        const detectionTimer = document.getElementById('detectionTimer');
        const timerCircle = document.getElementById('timerCircle');
        const timerText = document.getElementById('timerText');

        // Initialize language selection
        document.addEventListener('DOMContentLoaded', function() {
            const languageOptions = document.querySelectorAll('.language-option');
            
            languageOptions.forEach(option => {
                option.addEventListener('click', function() {
                    languageOptions.forEach(opt => opt.classList.remove('selected'));
                    this.classList.add('selected');
                    selectedLanguage = this.dataset.lang;
                });
            });
            
            selectedLanguage = languageOptions[0].dataset.lang;
            // Set default selection
            languageOptions[0].classList.add('selected');
            
            startSessionBtn.addEventListener('click', async function() {
                console.log("Selected language:", selectedLanguage);
                try {
                    // Set language in backend
                    await setLanguage(selectedLanguage);
                    
                    // Hide modal and start session
                    languageModal.classList.add("hidden");
                    
                    // Start camera and session
                    const cameraStarted = await startCamera();
                    if (cameraStarted) {
                        // Speak welcome message
                        await speakWelcome();
                        
                        // Enable start button
                        startBtn.disabled = false;
                        updateStatus("Ready to start session", "active");
                    }
                } catch (error) {
                    console.error("Error starting session:", error);
                    alert("Error starting session. Please try again.");
                }
            });
        });

        async function setLanguage(language) {
            try {
                const response = await fetch('/set_language', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ language: language })
                });
                
                const data = await response.json();
                if (data.success) {
                    currentLanguage = language;
                    console.log('🎤 Language set to:', language);
                } else {
                    console.error('❌ Failed to set language:', data.message);
                }
            } catch (error) {
                console.error('❌ Error setting language:', error);
            }
        }

        async function startCamera() {
            try {
                stream = await navigator.mediaDevices.getUserMedia({ 
                    video: { 
                        width: { ideal: 1280 },
                        height: { ideal: 720 },
                        facingMode: 'user'
                    } 
                });
                video.srcObject = stream;
                await video.play();
                updateStatus('Camera started', 'active');
                return true;
            } catch (err) {
                console.error('Failed to start camera', err);
                updateStatus('Camera error', 'error');
                return false;
            }
        }

        function stopCamera() {
            if (stream) {
                stream.getTracks().forEach(track => track.stop());
                stream = null;
            }
            if (video.srcObject) {
                video.srcObject = null;
            }
            updateStatus('Camera stopped', 'inactive');
        }

        function updateStatus(text, type = 'inactive') {
            statusEl.textContent = text;
            statusIndicator.className = `status-indicator ${type}`;
        }

        async function speakWelcome() {
            console.log('🎤 Speaking welcome message...');
            
            try {
                const response = await fetch('/speak_welcome', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ language: currentLanguage })
                });
                
                const data = await response.json();
                if (data.success) {
                    console.log('✅ Welcome message spoken successfully');
                    updateStatus('Welcome to yoga session', 'active');
                } else {
                    console.error('❌ Failed to speak welcome:', data.message);
                }
            } catch (error) {
                console.error('❌ Error speaking welcome:', error);
            }
        }

        async function speakFeedback(poseName, feedback) {
            if (!feedback || !poseName) return;
            
            console.log('🎤 Speaking feedback:', poseName, feedback);
            
            try {
                const response = await fetch('/speak_feedback', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        pose_name: poseName,
                        feedback: feedback,
                        language: currentLanguage
                    })
                });
                
                const data = await response.json();
                if (data.success) {
                    console.log('✅ Feedback spoken successfully');
                    updateStatus('Speaking feedback...', 'active');
                } else {
                    console.error('❌ Failed to speak feedback:', data.message);
                    updateStatus('Speech error', 'error');
                }
            } catch (error) {
                console.error('❌ Error speaking feedback:', error);
                updateStatus('Speech error', 'error');
            }
        }

        async function getInstructionsAndFeedback(poseName) {
            try {
                const response = await fetch('/get_instructions', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ 
                        pose_name: poseName,
                        language: currentLanguage
                    })
                });
                
                const data = await response.json();
                if (data.error) {
                    console.error('Error getting instructions:', data.error);
                    return null;
                }
                
                return {
                    instructions: data.instructions,
                    feedback: data.feedback
                };
            } catch (error) {
                console.error('Error fetching instructions:', error);
                return null;
            }
        }

        function updateInstructions(instructions) {
            if (instructions) {
                const lines = instructions.split('\n').filter(line => line.trim());
                instructionsList.innerHTML = '';
                
                lines.forEach(line => {
                    if (line.trim().startsWith('-') || line.trim().startsWith('*')) {
                        const li = document.createElement('li');
                        li.textContent = line.trim().substring(1).trim();
                        instructionsList.appendChild(li);
                    } else if (line.trim()) {
                        const li = document.createElement('li');
                        li.textContent = line.trim();
                        instructionsList.appendChild(li);
                    }
                });
            }
        }

        function updateFeedback(feedback) {
            if (feedback) {
                feedbackText.textContent = feedback;
            }
        }

        function getTraditionalName(poseName) {
            return traditionalNames[poseName] || poseName;
        }

        function updatePoseDisplay(poseName, confidence) {
            const traditionalName = getTraditionalName(poseName);
            
            poseNameEl.textContent = traditionalName;
            poseNameSide.textContent = traditionalName;
            poseNameOverlay.textContent = traditionalName;
            
            const confidencePercent = Math.round(confidence * 100);
            confidenceValue.textContent = confidencePercent + '%';
            confidenceValueBottom.textContent = confidencePercent + '%';
            confidenceValueSide.textContent = confidencePercent + '%';
            confidenceBar.style.width = confidencePercent + '%';
        }

        function startDetectionTimer() {
            let timeLeft = 5;
            detectionTimer.classList.add('active');
            
            const updateTimer = () => {
                timerText.textContent = timeLeft;
                const progress = ((5 - timeLeft) / 5) * 360;
                timerCircle.style.setProperty('--progress', `${progress}deg`);
                
                if (timeLeft <= 0) {
                    clearInterval(timerInterval);
                    detectionTimer.classList.remove('active');
                    return;
                }
                
                timeLeft--;
            };
            
            updateTimer();
            timerInterval = setInterval(updateTimer, 1000);
        }

        async function captureAndPredict() {
            if (!video.videoWidth || !video.videoHeight) return;

            canvas.width = video.videoWidth;
            canvas.height = video.videoHeight;
            const ctx = canvas.getContext('2d');
            ctx.drawImage(video, 0, 0, canvas.width, canvas.height);

            const blob = await new Promise(resolve => canvas.toBlob(resolve, 'image/jpeg', 0.8));
            const form = new FormData();
            form.append('file', new File([blob], 'frame.jpg', { type: 'image/jpeg' }));

            try {
                const res = await fetch('/predict', { method: 'POST', body: form });
                const data = await res.json();
                if (data.error) {
                    updateStatus(data.error, 'error');
                    return;
                }
                
                // Update pose display with traditional name
                updatePoseDisplay(data.pose, data.confidence);
                
                // Update annotated image
                if (data.image_url) {
                    annotatedImg.src = data.image_url + `?t=${Date.now()}`;
                }
                
                // Pose confirmation logic - check if same pose for 5 seconds
                if (data.pose === currentPose) {
                    // Check if we've been doing the same pose for 5 seconds
                    if (poseStartTime && (Date.now() - poseStartTime) >= POSE_CONFIRMATION_TIME) {
                        // 5 seconds have passed, announce the pose
                        if (data.pose !== lastAnnouncedPose) {
                            console.log('🎯 5 seconds passed, announcing pose:', data.pose);
                            lastAnnouncedPose = data.pose;
                            
                            // Get instructions and feedback from Gemini
                            const instructionsData = await getInstructionsAndFeedback(data.pose);
                            if (instructionsData) {
                                updateInstructions(instructionsData.instructions);
                                updateFeedback(instructionsData.feedback);
                                
                                // Speak ONLY the feedback (not instructions)
                                if (instructionsData.feedback) {
                                    speakFeedback(data.pose, instructionsData.feedback);
                                }
                            }
                            
                            // Reset the timer
                            poseStartTime = Date.now();
                        }
                    }
                } else {
                    // New pose detected, reset timer
                    currentPose = data.pose;
                    poseStartTime = Date.now();
                    lastAnnouncedPose = null;
                    console.log('🔄 New pose detected, resetting timer:', data.pose);
                }
                
                // Start countdown timer for next detection
                startDetectionTimer();
                
            } catch (e) {
                console.error(e);
                updateStatus('Network error', 'error');
            }
        }

        function startLoop() {
            if (loopHandle) return;
            updateStatus('Detecting...', 'active');
            poseStartTime = Date.now();
            lastAnnouncedPose = null;
            
            // Start with an immediate prediction
            captureAndPredict();
            // Then continue with the interval
            loopHandle = setInterval(captureAndPredict, CAPTURE_MS);
        }

        function stopLoop() {
            if (loopHandle) {
                clearInterval(loopHandle);
                loopHandle = null;
            }
            if (timerInterval) {
                clearInterval(timerInterval);
                timerInterval = null;
            }
            detectionTimer.classList.remove('active');
            updateStatus('Detection stopped', 'inactive');
        }

        function resetUI() {
            poseNameEl.textContent = '—';
            poseNameSide.textContent = '—';
            poseNameOverlay.textContent = '—';
            confidenceValue.textContent = '—';
            confidenceValueBottom.textContent = '—';
            confidenceValueSide.textContent = '—';
            confidenceBar.style.width = '0%';
            instructionsList.innerHTML = '<li>Start detection to see pose instructions</li>';
            feedbackText.textContent = 'Start detection to receive pose feedback';
            if (annotatedImg) {
                annotatedImg.src = '';
            }
            poseStartTime = null;
            lastAnnouncedPose = null;
            detectionTimer.classList.remove('active');
        }

        startBtn.addEventListener('click', async () => {
            startLoop();
            startBtn.disabled = true;
            stopBtn.disabled = false;
        });

        stopBtn.addEventListener('click', () => {
            stopLoop();
            stopCamera();
            resetUI();
            startBtn.disabled = true;
            stopBtn.disabled = true;
        });

        // Initialize with default state
        startBtn.disabled = true;
        stopBtn.disabled = true;
        updateStatus('Select language to begin', 'inactive');
    </script>
</body>
</html>
